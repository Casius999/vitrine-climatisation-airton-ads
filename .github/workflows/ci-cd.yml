name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  frontend-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Install dependencies
        run: cd frontend && npm ci
        
      - name: Run tests
        run: cd frontend && npm test
        
      - name: Build
        run: cd frontend && npm run build

  configurator-service-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: backend/configurator-service/package-lock.json
          
      - name: Install dependencies
        run: cd backend/configurator-service && npm ci
        
      - name: Run tests
        run: cd backend/configurator-service && npm test
        
      - name: Build Docker image
        run: cd backend/configurator-service && docker build -t airton-ads/configurator-service:latest .
        
      # En environnement de production, ajoutez les étapes pour pousser l'image Docker
      # vers un registre comme Docker Hub ou ECR

  booking-service-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'
          
      - name: Build with Maven
        run: cd backend/booking-service && ./mvnw clean package -DskipTests
        
      - name: Run tests
        run: cd backend/booking-service && ./mvnw test
        
      - name: Build Docker image
        run: cd backend/booking-service && docker build -t airton-ads/booking-service:latest .

  payment-service-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: backend/payment-service/package-lock.json
          
      - name: Install dependencies
        run: cd backend/payment-service && npm ci
        
      - name: Run tests
        run: cd backend/payment-service && npm test
        
      - name: Build Docker image
        run: cd backend/payment-service && docker build -t airton-ads/payment-service:latest .

  reviews-service-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          cd backend/reviews-service
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Run tests
        run: cd backend/reviews-service && pytest
        
      - name: Build Docker image
        run: cd backend/reviews-service && docker build -t airton-ads/reviews-service:latest .

  notification-service-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          cd backend/notification-service
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Run tests
        run: cd backend/notification-service && pytest
        
      - name: Build Docker image
        run: cd backend/notification-service && docker build -t airton-ads/notification-service:latest .

  # Pour un environnement de production réel, ajoutez un job de déploiement
  # deploy-staging:
  #   needs: [frontend-build, configurator-service-build, booking-service-build, payment-service-build, reviews-service-build, notification-service-build]
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/main'
  #   steps:
  #     - uses: actions/checkout@v3
  #     
  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: eu-west-3
  #     
  #     - name: Deploy to EKS
  #       uses: aws-actions/amazon-eks-update-kubeconfig@v1
  #       with:
  #         cluster-name: airton-ads-cluster
  #         region: eu-west-3
  #     
  #     - name: Deploy to Kubernetes
  #       run: |
  #         kubectl apply -f kubernetes/staging/