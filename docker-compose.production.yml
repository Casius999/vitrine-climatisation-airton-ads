version: '3.8'

services:
  # Frontend service
  frontend:
    image: ${DOCKER_REGISTRY}/airton-frontend:production
    container_name: airton-frontend
    restart: always
    ports:
      - "80:80"
      - "443:443"
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=https://api.airton-installation.fr
      - REACT_APP_STRIPE_PUBLIC_KEY=${STRIPE_PUBLIC_KEY}
    volumes:
      - ./nginx/production.conf:/etc/nginx/conf.d/default.conf
      - ./ssl:/etc/nginx/ssl
      - frontend_cache:/var/cache/nginx
    depends_on:
      - backend
    networks:
      - airton-network

  # Backend service
  backend:
    image: ${DOCKER_REGISTRY}/airton-backend:production
    container_name: airton-backend
    restart: always
    environment:
      - NODE_ENV=production
      - PORT=8080
      - MONGODB_URI=${MONGODB_URI}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - JWT_SECRET=${JWT_SECRET}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - EMAIL_FROM=${EMAIL_FROM}
    volumes:
      - backend_data:/app/data
      - backend_logs:/app/logs
    depends_on:
      - mongodb
    networks:
      - airton-network

  # MongoDB service
  mongodb:
    image: mongo:6.0-focal
    container_name: airton-mongodb
    restart: always
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=airton
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - airton-network
    command: ["--auth", "--bind_ip_all"]

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: airton-redis
    restart: always
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - airton-network

  # Payment service
  payment-service:
    image: ${DOCKER_REGISTRY}/airton-payment-service:production
    container_name: airton-payment-service
    restart: always
    environment:
      - NODE_ENV=production
      - PORT=8081
      - MONGODB_URI=${MONGODB_URI}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - JWT_SECRET=${JWT_SECRET}
      - REDIS_URI=redis://redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - payment_logs:/app/logs
    depends_on:
      - mongodb
      - redis
    networks:
      - airton-network

  # Supplier order service
  supplier-service:
    image: ${DOCKER_REGISTRY}/airton-supplier-service:production
    container_name: airton-supplier-service
    restart: always
    environment:
      - NODE_ENV=production
      - PORT=8082
      - MONGODB_URI=${MONGODB_URI}
      - JWT_SECRET=${JWT_SECRET}
      - AIRTON_API_KEY=${AIRTON_API_KEY}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - EMAIL_FROM=${EMAIL_FROM}
    volumes:
      - supplier_logs:/app/logs
    depends_on:
      - mongodb
    networks:
      - airton-network

  # Notification service
  notification-service:
    image: ${DOCKER_REGISTRY}/airton-notification-service:production
    container_name: airton-notification-service
    restart: always
    environment:
      - NODE_ENV=production
      - PORT=8083
      - MONGODB_URI=${MONGODB_URI}
      - JWT_SECRET=${JWT_SECRET}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - EMAIL_FROM=${EMAIL_FROM}
    volumes:
      - notification_logs:/app/logs
    depends_on:
      - mongodb
    networks:
      - airton-network

  # RabbitMQ for message queue
  rabbitmq:
    image: rabbitmq:3.11-management-alpine
    container_name: airton-rabbitmq
    restart: always
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - airton-network

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:v2.42.0
    container_name: airton-prometheus
    restart: always
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - airton-network

  # Grafana for monitoring
  grafana:
    image: grafana/grafana:9.4.3
    container_name: airton-grafana
    restart: always
    volumes:
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus
    networks:
      - airton-network

  # NGINX configuration for backend API
  nginx-api:
    image: nginx:1.25-alpine
    container_name: airton-nginx-api
    restart: always
    ports:
      - "8000:80"
      - "8443:443"
    volumes:
      - ./nginx/api.conf:/etc/nginx/conf.d/default.conf
      - ./ssl:/etc/nginx/ssl
      - api_cache:/var/cache/nginx
    depends_on:
      - backend
      - payment-service
      - supplier-service
      - notification-service
    networks:
      - airton-network

networks:
  airton-network:
    driver: bridge

volumes:
  frontend_cache:
  backend_data:
  backend_logs:
  mongodb_data:
  redis_data:
  payment_logs:
  supplier_logs:
  notification_logs:
  rabbitmq_data:
  prometheus_data:
  grafana_data:
  api_cache: